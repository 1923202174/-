//+------------------------------------------------------------------+
//|                                           改造后的 Daily102EA.mq5 |
//|     核心思想：在上次下单（成功）后，必须等待至少 Order_IntervalSec 秒才开始新一轮信号检测  |
//+------------------------------------------------------------------+
#property copyright "ChatGPT 示例"
#property link      ""
#property version   "1.00"
#property strict
#include <Trade\Trade.mqh>        // 交易相关结构和常量
#include <Indicators\Indicators.mqh> // 定义 MODE_EMA、PRICE_CLOSE、iMA、iMACD 等

//--- EMA 与 MACD 的指标句柄（如果你之前用 CopyBuffer() 读取，就保留这三行）
int handleEMA_Fast  = INVALID_HANDLE;
int handleEMA_Slow  = INVALID_HANDLE;
int handleMACD      = INVALID_HANDLE;

//--- 输入参数区（可在EA属性里调整）
input int    EMA_Fast_Period   = 12;          // 快EMA周期
input int    EMA_Slow_Period   = 26;          // 慢EMA周期
input int    MACD_FastEMA      = 12;          // MACD 快速EMA
input int    MACD_SlowEMA      = 26;          // MACD 慢速EMA
input int    MACD_SignalSMA    = 9;           // MACD 信号线SMA

input double TakeProfit_Percent= 0.19;        // 止盈百分比
input double StopLoss_Percent  = 3.93;        // 止损百分比

input int    Max_Orders        = 5;           // 同一时间最多持仓数
input int    Order_IntervalSec = 300;         // 交易间隔（秒），这里示例是300秒（5分钟）

input double Profit_Target     = 1.02;        // 本周期累计浮盈目标（%）
input double Loss_Threshold    = 0.94;        // 本周期最大浮损阈值（%）

input string Email_To          = "18325.tony@gmail.com"; // 收件邮箱

//--- 全局变量
datetime   cycle_start_time;      // 本周期（12小时）开始时间
double     cycle_start_balance;   // 本周期开始时的账户余额（或净值）
bool       cycle_goal_reached;    // 本周期是否已达到 1.02% 目标
bool       sent_loss_mail;        // 本周期是否已发亏损邮件
int        orders_opened_in_cycle;// 本周期已开仓次数

datetime   lastTradeTime;         // 上一次下单成功的时间（用来 enforce 间隔）

//+------------------------------------------------------------------+
//| Expert 初始化函数                                               |
//+------------------------------------------------------------------+
int OnInit()
  {
   // 1) 记录首次启动时的周期开始时间和初始净值
   cycle_start_time       = TimeCurrent();
   cycle_start_balance    = AccountInfoDouble(ACCOUNT_BALANCE);
   cycle_goal_reached     = false;
   sent_loss_mail         = false;
   orders_opened_in_cycle = 0;

   // 2) 初始化 lastTradeTime
   lastTradeTime = TimeCurrent() - Order_IntervalSec;

   // 3) 此处先不立即创建句柄，改到 OnTick() 里“在历史足够”的时候再创建
   handleEMA_Fast = INVALID_HANDLE;
   handleEMA_Slow = INVALID_HANDLE;
   handleMACD     = INVALID_HANDLE;

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert 去初始化函数                                             |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   // 如果你希望释放指标句柄（可选），可以加上：
   // IndicatorRelease(handleEMA_Fast);
   // IndicatorRelease(handleEMA_Slow);
   // IndicatorRelease(handleMACD);
  }

//+------------------------------------------------------------------+
//| Tick 回调：每来一个 Tick 就执行一次                              |
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| Tick 回调函数                                                     |
//+------------------------------------------------------------------+
void OnTick()
  {
   int needBars  = MACD_SlowEMA + MACD_SignalSMA + 1;  // 例如 26+9+1 = 36
   int totalBars = Bars(_Symbol, _Period);

   // A. 打印 Bars 和 needBars，确认历史是否充足
   PrintFormat("[OnTick] Bars=%d, needBars=%d", totalBars, needBars);

   // B. 如果历史还不够，就直接返回
   if(totalBars < needBars)
     {
       return;
     }

// C. 历史够了，马上要创建句柄
Print("[OnTick] 历史已满足，马上执行创建句柄（iMA/iMACD）……");

// C1. 先打印一下这三个句柄“现在”是什么状态
PrintFormat("[OnTick] 进入 if 之前：handleEMA_Fast=%d, handleEMA_Slow=%d, handleMACD=%d",
            handleEMA_Fast, handleEMA_Slow, handleMACD);

// D. 如果句柄还没创建，就创建一次，并立即打印
if(handleEMA_Fast == INVALID_HANDLE || handleEMA_Slow == INVALID_HANDLE || handleMACD == INVALID_HANDLE)
  {
    handleEMA_Fast = iMA(_Symbol, _Period, EMA_Fast_Period, 0, MODE_EMA, PRICE_CLOSE);
    handleEMA_Slow = iMA(_Symbol, _Period, EMA_Slow_Period, 0, MODE_EMA, PRICE_CLOSE);
    handleMACD     = iMACD(_Symbol, _Period, MACD_FastEMA, MACD_SlowEMA, MACD_SignalSMA, PRICE_CLOSE);

    // 下面这行一定要执行，才能看到新得到的句柄值
    PrintFormat("[OnTick] 创建句柄完成：handleEMA_Fast=%d, handleEMA_Slow=%d, handleMACD=%d",
                handleEMA_Fast, handleEMA_Slow, handleMACD);

    if(handleMACD == INVALID_HANDLE)
      {
        Print("[OnTick] 注意：handleMACD 仍然是 INVALID_HANDLE（-1），无法继续。");
        return;
      }
  }
else
  {
    // 如果这里能进 else，说明三者都已经有效，就不会再创建，打印下面这行确认一下
    Print("[OnTick] 三个句柄已经全部创建过，不再重复调用 iMA/iMACD。");
  }
   // ======  下面是新增的调试打印，确认一定会进到这里  ======
   Print("[OnTick] 句柄都准备好了，要调用 CheckAndPlaceOrder() 了。");
   // =====================================================

   // 4) （结合你原来的“浮盈/浮损监控”）…

   // 5) “距离上次下单至少 Order_IntervalSec 秒”判定
   datetime now = TimeCurrent();
   if((now - lastTradeTime) < Order_IntervalSec)
     {
       PrintFormat("[OnTick] 距离上次下单（%s）不足 %d 秒，跳过 CheckAndPlaceOrder()。",
                   TimeToString(lastTradeTime,TIME_SECONDS), Order_IntervalSec);
       return;
     }

   // ====== 真正调用下单逻辑 ======
   Print("[OnTick] 满足间隔判定，进入 CheckAndPlaceOrder()。");
   CheckAndPlaceOrder();
  }


//+------------------------------------------------------------------+
//| 判断开仓信号：基于 EMA 与 MACD                                   |
//| 1=做多，-1=做空，0=无信号                                        |
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| 判断开仓信号：基于 EMA 与 MACD                                     |
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| 判断开仓信号：仅基于 EMA 金叉/死叉（1=做多，-1=做空，0=无信号）|
//+------------------------------------------------------------------+
int CheckSignal()
  {
   // —— 确保只在新 K 线闭合后才取值 —— 
   static datetime lastBarTime = 0;
   datetime barTime = iTime(_Symbol, _Period, 0);
   if(barTime == lastBarTime) 
     return 0;            // 如果同一根 K 线还没闭合，就先跳过
   lastBarTime = barTime; // 更新为最新已闭合的 K 线时间

   // —— 拷贝 EMA 快线最近两根数据 —— 
   double emaFastArr[2];
   int copiedFast = CopyBuffer(handleEMA_Fast, 0, 0, 2, emaFastArr);
   int errFast    = GetLastError();
   PrintFormat("[CheckSignal-EMA] CopyBuffer EMA_Fast 返回=%d, 错误=%d, Bars=%d",
               copiedFast, errFast, Bars(_Symbol, _Period));
   ResetLastError();
   if(copiedFast < 2) 
     return 0;  // 拷贝不到两条数据，先退出

   // —— 拷贝 EMA 慢线最近两根数据 —— 
   double emaSlowArr[2];
   int copiedSlow = CopyBuffer(handleEMA_Slow, 0, 0, 2, emaSlowArr);
   int errSlow    = GetLastError();
   PrintFormat("[CheckSignal-EMA] CopyBuffer EMA_Slow 返回=%d, 错误=%d, Bars=%d",
               copiedSlow, errSlow, Bars(_Symbol, _Period));
   ResetLastError();
   if(copiedSlow < 2) 
     return 0;  // 拷贝不到两条数据，先退出

   // —— 取最新根的快慢线值 —— 
   double ema_fast = emaFastArr[0];
   double ema_slow = emaSlowArr[0];

   // —— 调试：打印当前 EMA 快/慢值 —— 
   PrintFormat("[CheckSignal-EMA] ema_fast=%.5f, ema_slow=%.5f",
               ema_fast, ema_slow);

   // —— 如果出现 金叉（快线>慢线） 就做多 → 返回 1 —— 
   if(ema_fast > ema_slow)
     {
       Print("[CheckSignal-EMA] 满足金叉条件，返回 1（做多）");
       return 1;
     }

   // —— 如果出现 死叉（快线<慢线） 就做空 → 返回 -1 —— 
   if(ema_fast < ema_slow)
     {
       Print("[CheckSignal-EMA] 满足死叉条件，返回 -1（做空）");
       return -1;
     }

   // —— 其他情况无信号 —— 
   Print("[CheckSignal-EMA] 未满足金叉/死叉条件，返回 0");
   return 0;
  }





//+------------------------------------------------------------------+
//| 检测信号并下单                                                   |
//+------------------------------------------------------------------+
void CheckAndPlaceOrder()
  {
   Print("[CheckAndPlaceOrder] 已进入下单函数，马上判断周期/持仓/信号等。");
   datetime now = TimeCurrent();
   PrintFormat(">>>> [%s] 进入 CheckAndPlaceOrder", TimeToString(now, TIME_SECONDS));

   // 条件1：跨周期（12 小时）重置
   if((now - cycle_start_time) >= 12*3600)
     {
       Print("[CheckAndPlaceOrder] 跨过12小时，新周期重置");
       cycle_start_time       = now;
       cycle_start_balance    = AccountInfoDouble(ACCOUNT_BALANCE);
       cycle_goal_reached     = false;
       sent_loss_mail         = false;
       orders_opened_in_cycle = 0;
       // 如果要让新周期开始后再等5分钟检信号，可加下面一句：
       // lastTradeTime = now;
       return;
     }

   // 条件2：本周期已达标
   if(cycle_goal_reached)
     {
       Print("[CheckAndPlaceOrder] 本周期已达标，不再开仓");
       return;
     }

   // 条件3：持仓上限
   int total_positions = PositionsTotal();
   PrintFormat("[CheckAndPlaceOrder] 当前持仓数量=%d, Max_Orders=%d", total_positions, Max_Orders);
   if(total_positions >= Max_Orders)
     {
       Print("[CheckAndPlaceOrder] 持仓到上限，不再开仓");
       return;
     }

   // 条件4：判断信号
   int signal = CheckSignal();
   PrintFormat("[CheckAndPlaceOrder] 信号返回 = %d", signal);
   if(signal == 0)
     {
       Print("[CheckAndPlaceOrder] 未满足 EMA+MACD 条件，暂不下仓");
       return;
     }

   // 计算手数
   double lot_size = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN); // 最小手数
   PrintFormat("[CheckAndPlaceOrder] 计划下单手数 = %.2f", lot_size);

   // 计算价格、SL、TP
   double price = (signal > 0) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) : SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double sl, tp;
   if(signal > 0)
     {
       sl = price * (1.0 - StopLoss_Percent/100.0);
       tp = price * (1.0 + TakeProfit_Percent/100.0);
     }
   else
     {
       sl = price * (1.0 + StopLoss_Percent/100.0);
       tp = price * (1.0 - TakeProfit_Percent/100.0);
     }
   PrintFormat("[CheckAndPlaceOrder] 价格=%.5f, SL=%.5f, TP=%.5f", price, sl, tp);

   // 构建并发送下单请求
   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action    = TRADE_ACTION_DEAL;
   request.symbol    = _Symbol;
   request.volume    = lot_size;
   request.type      = (signal > 0) ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;
   request.price     = price;
   request.sl        = sl;
   request.tp        = tp;
   request.deviation = 10;
   request.magic     = 20231205;
   request.comment   = "Daily102_EA";
 // —— 以下两行一定要加：指定成交方式和订单时效 —— 
   request.type_filling = ORDER_FILLING_IOC;                    // 成交方式：立即成交/剩余取消
   request.type_time    = ORDER_TIME_GTC;                       // 有效期：GTC（直到取消）
   if(!OrderSend(request, result))
     {
       PrintFormat("[CheckAndPlaceOrder] 下单失败：retcode=%d, 描述=%s",
                   result.retcode, result.comment);
       // 下单失败不更新 lastTradeTime，下次再尝试
     }
   else
     {
       orders_opened_in_cycle++;
       PrintFormat("[CheckAndPlaceOrder] 下单成功！类型=%s, 价格=%.5f, SL=%.5f, TP=%.5f, Ticket=%I64d",
                   (signal>0) ? "Buy" : "Sell", price, sl, tp, result.order);

       // 更新“上一次下单时间”，强制等5分钟后才再检测信号
       lastTradeTime = now;
     }
  }
//+------------------------------------------------------------------+
//| 平掉所有当前持仓                                                   |
//+------------------------------------------------------------------+
void CloseAllPositions()
  {
   for(int i = PositionsTotal() - 1; i >= 0; i--)
     {
       ulong ticket = PositionGetTicket(i);
       if(PositionSelectByTicket(ticket))
         {
           string sym     = PositionGetString(POSITION_SYMBOL);
           double volume  = PositionGetDouble(POSITION_VOLUME);
           int    pos_type= (int)PositionGetInteger(POSITION_TYPE);
           double price   = (pos_type == POSITION_TYPE_BUY)
                            ? SymbolInfoDouble(sym, SYMBOL_BID)
                            : SymbolInfoDouble(sym, SYMBOL_ASK);

           MqlTradeRequest request;
           MqlTradeResult  result;
           ZeroMemory(request);
           ZeroMemory(result);

           request.action   = TRADE_ACTION_DEAL;
           request.symbol   = sym;
           request.volume   = volume;
           request.position = ticket;
           request.type     = (pos_type == POSITION_TYPE_BUY) ? ORDER_TYPE_SELL : ORDER_TYPE_BUY;
           request.price    = price;
           request.deviation= 10;
           request.magic    = 20231205;
           request.comment  = "Daily102_EA_CloseAll";

           if(!OrderSend(request, result))
             PrintFormat("平仓失败：Ticket=%I64d, 错误码=%d, 描述=%s",
                         ticket, result.retcode, result.comment);
           else
             PrintFormat("平仓成功：Ticket=%I64d, 类型=%s, 价格=%.5f",
                         ticket,
                         (pos_type==POSITION_TYPE_BUY) ? "平Buy" : "平Sell",
                         price);
         }
     }
  }
